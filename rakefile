require 'rake'

ROOT_DIR = File.expand_path('.')
TMP_DIR = File.join(ROOT_DIR, 'tmp')
TMP_DIR_BUILD = File.join(TMP_DIR, 'build')

PARENT_DIR = File.expand_path('..')
RELEASE_DIR = File.join(PARENT_DIR, 'release')
BIN_DIR = File.join(PARENT_DIR, 'bin') # 

KEXT_DIR     = File.join(PARENT_DIR, 'totalterminal-kext')
I18N_DIR     = File.join(PARENT_DIR, 'totalterminal-i18n')
I18N_DIR_INSTALLER = File.join(I18N_DIR, 'installer')

################################################################################################
# dependencies

begin
    require 'colored'
rescue LoadError
    raise 'You must "gem install colored" to use terminal colors'
end

################################################################################################
# helpers

def die(msg, status=1)
    puts "Error[#{status||$?}]: #{msg}".red
    exit status||$?
end

def sys(cmd)
    puts "> #{cmd}".yellow
    system(cmd)
end

################################################################################################
# routines

def version()
  $version = ENV["version"] or die("specify version")
end

def patch(path, replacers)
  puts "#{'Patching'.red} #{path.blue}"
  lines = []
  File.open(path, "r") do |f|
    f.each do |line|
      replacers.each do |r|
        line.gsub!(r[0], r[1])
      end
      lines << line
    end
  end
  File.open(path, "w") do |f|
    f << lines
  end
end

################################################################################################
# tasks

desc "builds installer+unistaller, point it to products=<path>"
task :build do
    puts "#{'Checking environment ...'.magenta}"
    version()
    sys("rm -rf \"#{TMP_DIR}\"")
    sys("mkdir -p #{TMP_DIR}") unless File.exists? TMP_DIR
    sys("mkdir -p #{TMP_DIR_BUILD}") unless File.exists? TMP_DIR_BUILD
    sys("mkdir -p #{RELEASE_DIR}") unless File.exists? RELEASE_DIR
    
    $products = ENV["products"]
    unless $products then
        puts "no products path specified, using dummy products".red
        sys("mkdir -p \"#{BIN_DIR}\"")
        Dir.chdir BIN_DIR do
            sys("mkdir -p TotalTerminal.app/Contents/Resources")
        end
        $products = BIN_DIR
    end
    $products = File.expand_path($products)

    $release = File.expand_path(ENV["release"] || RELEASE_DIR)
    
    sys("cp \"#{ROOT_DIR}/installer.pkgproj\" \"#{ROOT_DIR}/installer-patched.pkgproj\"")
    patch("#{ROOT_DIR}/installer-patched.pkgproj", [
        ['##VERSION##', $version], 
        ['##INSTALLER_TITLE##', "TotalTerminal #{$version}"],
        ['/Users/darwin/code/totalterminal/release', $release]
    ])

    sys("cp \"#{ROOT_DIR}/uninstaller.platypus\" \"#{ROOT_DIR}/uninstaller-patched.platypus\"")
    patch("#{ROOT_DIR}/uninstaller-patched.platypus", [
        ["/Users/darwin/code/totalterminal", "#{ROOT_DIR}/.."]
    ])
  
    uninstaller = File.join(ROOT_DIR, "TotalTerminal Uninstaller.app")
    uninstaller_profile = File.join(ROOT_DIR, "uninstaller-patched.platypus")
  
    sys("rm -rf \"#{uninstaller}\"") if File.exist? uninstaller
    die("build failed") unless $?==0
    
    sys("platypus -P \"#{uninstaller_profile}\" \"#{uninstaller}\"")
    die("build failed") unless $?==0
    
    sys("cp -r \"#{uninstaller}\" \"#{BIN_DIR}/TotalTerminal.app/Contents/Resources\"")
    die("build failed") unless $?==0

    sys("lipo \"#{BIN_DIR}/TotalTerminal.app/Contents/MacOS/applet\" -remove ppc7400 -output \"#{BIN_DIR}/TotalTerminal.app/Contents/MacOS/applet\"; true")

    patch("#{BIN_DIR}/TotalTerminal.app/Contents/Info.plist", [
        ['##VERSION##', $version]
    ])
    
    # compilation of main.applescript -> main.scpt is done during build, here just check its presence
    Dir.chdir("#{BIN_DIR}/TotalTerminal.app/Contents/Resources/Scripts") do
        die("no main.scpt present!") unless File.exists? "main.scpt"
    end
   
    release = File.join($release, "TotalTerminal.mpkg") # THIS MUST BE THE SAME NAME AS OF THE APP! REQUIRED BY SPARKLE
    sys("rm -rf \"#{release}\"") if File.exist? release
    die("build failed") unless $?==0
    
    # HACK!!!! => see BRUTEFORCE in script_app_post
    sys("mv \"#{BIN_DIR}/TotalTerminal.app/Contents/Resources/TotalTerminal.bundle\" \"#{BIN_DIR}/TotalTerminal.app/Contents/Resources/TotalTerminal\"");
  
    sys("packagesbuild -v -F \"#{ROOT_DIR}\" \"#{ROOT_DIR}/installer-patched.pkgproj\"")
    die("build failed") unless $?==0
   
    installer_icon = File.join(I18N_DIR_INSTALLER, "totalterminal-installer.icns")
    sys("./wincent-icon-util -icon \"#{installer_icon}\" -folder \"#{release}\"")
    die("build failed") unless $?==0
   
    releasedmg = File.join($release, "TotalTerminal-#{$version}.dmg")
    sys("rm -rf \"#{releasedmg}\"") if File.exist? releasedmg
    die("build failed") unless $?==0
   
    readme_source = File.join(I18N_DIR_INSTALLER, "readme.pdf")
    readme = File.join(TMP_DIR, "Readme.pdf")
    sys("mv \"#{readme_source}\" \"#{readme}\"")
 
    sys("hdiutil create \"#{releasedmg}\" -volname \"TotalTerminal\" -fs HFS+ -srcfolder \"#{release}\" -srcfolder \"#{uninstaller}\" -srcfolder \"#{readme}\"")
    die("build failed") unless $?==0
    
    Rake::Task["clean"].execute
end
  
desc "removes intermediate build files"
task :clean do
    puts "Cleaning intermediate build files...".magenta
    sys("rm -rf \"#{TMP_DIR}\"")
    sys("rm -rf \"#{BIN_DIR}\"")
    sys("rm \"#{ROOT_DIR}/uninstaller-patched.platypus\"") if File.exists?("#{ROOT_DIR}/uninstaller-patched.platypus")
    sys("rm \"#{ROOT_DIR}/installer-patched.pkgproj\"")  if File.exists?("#{ROOT_DIR}/installer-patched.pkgproj")
    sys("rm -rf \"#{ROOT_DIR}/TotalTerminal Uninstaller.app\"")
    sys("rm -rf \"#{File.expand_path(ENV["release"] || RELEASE_DIR)}/TotalTerminal.mpkg\"")
end

task :default => :build