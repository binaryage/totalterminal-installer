require 'rake'

TMP_DIR = "/tmp/root/totalterminal-installer-tmp"
ROOT_DIR = File.expand_path('.')
PARENT_DIR = File.expand_path('..')
BUILD_DIR = File.join(PARENT_DIR, '.build')

BUILD_OSAX_RESOURCES = File.join(BUILD_DIR, 'TotalTerminal.osax/Contents/Resources')
BUILD_TOTALTERMINAL_BUNDLE = File.join(BUILD_OSAX_RESOURCES, 'TotalTerminal.bundle')
BUILD_TOTALTERMINAL_FRAMEWORKS = File.join(BUILD_TOTALTERMINAL_BUNDLE, 'Contents/Frameworks')
BUILD_TOTALTERMINAL_RESOURCES = File.join(BUILD_TOTALTERMINAL_BUNDLE, 'Contents/Resources')

I18N_DIR = File.join(PARENT_DIR, 'i18n')
I18N_DIR_INSTALLER = File.join(I18N_DIR, 'installer')

################################################################################################
# dependencies

begin
    require 'colored'
rescue LoadError
    raise 'You must "gem install colored" to use terminal colors'
end

################################################################################################
# helpers

def die(msg, status=1)
    puts "Error[#{status||$?}]: #{msg}".red
    exit status||$?
end

def announce(cmd)
  puts "> " + cmd.yellow
end

def sys(cmd)
  announce(cmd)
  if not system(cmd) then
    die "error #{$?}"
  end
end

################################################################################################
# routines

def version()
  $version = ENV["version"] or die("specify version")
end

def patch(path, replacers)
  puts "#{'Patching'.red} #{path.blue}"
  lines = []
  File.open(path, "r") do |f|
    f.each do |line|
      replacers.each do |r|
        line.gsub!(r[0], r[1])
      end
      lines << line
    end
  end
  File.open(path, "w") do |f|
    f << lines.join
  end
end

def codesign(path)
  sys("codesign --force --sign \"Developer ID Application: BinaryAge Limited\" \"#{path}\"")
  die("build failed") unless $?==0
end

def productsign(path)
  tmp_path = path+"-tmp"
  sys("mv \"#{path}\" \"#{tmp_path}\"")
  sys("productsign --sign \"Developer ID Installer: BinaryAge Limited\" \"#{tmp_path}\" \"#{path}\"")
  die("build failed") unless $?==0
  sys("rm \"#{tmp_path}\"")
end

def lipo(dir)
  puts "Doing liposuction in #{dir.blue} ..."
  Dir.chdir(dir) do
    binaries = []
    Dir.glob("**/*") do |file|
      next unless File.executable? file
      next unless `file \"#{file}\"` =~ /Mach-O/
      binaries << file
    end

    binaries.each do |binary|
      sys("lipo -thin x86_64 -output \"#{binary}\" \"#{binary}\"") unless `lipo -info \"#{binary}\"` =~ /^Non-fat/
    end
  end
end

################################################################################################
# tasks

desc "builds installer+unistaller, point it to products=<path>"
task :build do
    puts "#{'Checking environment ...'.magenta}"
    version()

    $release = File.expand_path(ENV["release"])

    sys("cp \"#{ROOT_DIR}/installer.pkgproj\" \"#{ROOT_DIR}/installer-patched.pkgproj\"")
    patch("#{ROOT_DIR}/installer-patched.pkgproj", [
        ['##VERSION##', $version],
        ['##INSTALLER_TITLE##', "TotalTerminal #{$version}"],
        ['##ROOT_PATH##', PARENT_DIR],
        ['##BUILD_PATH##', $release]
    ])

    uninstaller = "#{BUILD_TOTALTERMINAL_RESOURCES}/TotalTerminal Uninstaller.app"

    patch("#{uninstaller}/Contents/Info.plist", [
        ['##VERSION##', $version]
    ])

    patch("#{BUILD_DIR}/TotalTerminal.app/Contents/Info.plist", [
        ['##VERSION##', $version]
    ])

    lipo(BUILD_TOTALTERMINAL_RESOURCES)

    # prepare two versions of agent, they will only differ in icon (Yosemite Terminal changed its icon)
    sys("mkdir -p TotalTerminal.app/Contents/Resources")
    pre_yosemite_agent = File.join(BUILD_OSAX_RESOURCES, "Agent", "10.9")
    post_yosemite_agent = File.join(BUILD_OSAX_RESOURCES, "Agent", "10.10")
    sys("mkdir -p \"#{pre_yosemite_agent}\" && cp -r \"#{BUILD_DIR}/TotalTerminal.app\" \"#{pre_yosemite_agent}\"")
    yosemite_icon = File.join(BUILD_TOTALTERMINAL_RESOURCES, "TotalTerminalIcon2.icns")
    agent_icon_location = File.join(post_yosemite_agent, "TotalTerminal.app", "Contents", "Resources", "Icon.icns")
    sys("mkdir -p \"#{post_yosemite_agent}\" && cp -r \"#{BUILD_DIR}/TotalTerminal.app\" \"#{post_yosemite_agent}\" && cp \"#{yosemite_icon}\" \"#{agent_icon_location}\"")

    # codesign stuff
    codesign(uninstaller)
    codesign("#{pre_yosemite_agent}/TotalTerminal.app")
    codesign("#{post_yosemite_agent}/TotalTerminal.app")

    codesign(File.join(BUILD_TOTALTERMINAL_FRAMEWORKS, "Sparkle.framework/Versions/A/Resources/finish_installation.app"))
    codesign(File.join(BUILD_TOTALTERMINAL_FRAMEWORKS, "Sparkle.framework/Versions/A"))
    codesign(File.join(BUILD_TOTALTERMINAL_FRAMEWORKS, "BAKit.framework/Versions/A"))
    codesign(File.join(BUILD_TOTALTERMINAL_RESOURCES, "TotalTerminalCrashWatcher.app"))
    codesign(File.join(BUILD_TOTALTERMINAL_BUNDLE))
    codesign(File.join(BUILD_DIR, "TotalTerminal.osax"))

    release = File.join($release, "TotalTerminal.pkg") # THIS MUST BE THE SAME NAME AS OF THE APP! REQUIRED BY SPARKLE
    sys("rm -rf \"#{release}\"") if File.exist? release

    sys("./bin/packagesbuild -v -F \"#{ROOT_DIR}\" \"#{ROOT_DIR}/installer-patched.pkgproj\"")

    installer_icon = File.join(I18N_DIR_INSTALLER, "installer.icns")
    sys("./bin/setfileicon \"#{installer_icon}\" \"#{release}\"")

    releasedmg = File.join($release, "TotalTerminal-#{$version}.dmg")
    sys("rm -rf \"#{releasedmg}\"") if File.exist? releasedmg

    readme_source = File.join(I18N_DIR_INSTALLER, "readme.pdf")

    # codesign the pkg
    productsign(release)

    sys("hdiutil create \"#{releasedmg}\" -volname \"TotalTerminal\" -format UDBZ -fs HFS+ -srcfolder \"#{release}\" -srcfolder \"#{uninstaller}\" -srcfolder \"#{readme_source}\"")
end

task :default => :build
